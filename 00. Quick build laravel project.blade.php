				Modified till 08.11.2018
					 By Ahmed ullah updating................
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
		#1.Full Guide Line for making a new website using Laravel
		All supports are for laravel version 5.6 By Ahmed ullah - 27/06/2018
=====================================================INDEX================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@INDEX@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
					Whats are available here..............
===========================================================================================================================
** To remove migrate error
---------------------------------------------------------------------------------------------------------------------------
** To Remove public from url add this .htaccess file Rote Directiry...
---------------------------------------------------------------------------------------------------------------------------
** Running Database Migrations
---------------------------------------------------------------------------------------------------------------------------
** Default Authentication
---------------------------------------------------------------------------------------------------------------------------
** Conditionally viewing data
---------------------------------------------------------------------------------------------------------------------------
** Default Authentication //Redirection // check login OR Not
---------------------------------------------------------------------------------------------------------------------------
** Conditionally viewing data
---------------------------------------------------------------------------------------------------------------------------
** check login OR Not
---------------------------------------------------------------------------------------------------------------------------
** To redirect from controller function / method if not login
---------------------------------------------------------------------------------------------------------------------------
** Redirection code / Return / Redirect from a page in different ways
---------------------------------------------------------------------------------------------------------------------------
** Retrieve Session Value (Authentication) after login
---------------------------------------------------------------------------------------------------------------------------
** Routing Example url() and route()
---------------------------------------------------------------------------------------------------------------------------
**  Multiple authentication coping default auth's
---------------------------------------------------------------------------------------------------------------------------
** Laracollective Form
---------------------------------------------------------------------------------------------------------------------------
** To update composer --    composer update
---------------------------------------------------------------------------------------------------------------------------
** Datatype in Laravel
---------------------------------------------------------------------------------------------------------------------------
** Form validation in controller //field required unique etc
---------------------------------------------------------------------------------------------------------------------------
** Query Builder Class  / query from multiple table / select query from two table table /inRandomOrder()/orderBy/ Query using Model
---------------------------------------------------------------------------------------------------------------------------
** Eloquent Model / Eloquent  Query  -- insert/create/update/delete
---------------------------------------------------------------------------------------------------------------------------
** Retrieving Models
---------------------------------------------------------------------------------------------------------------------------
** Retrieving Single Models / Aggregates
---------------------------------------------------------------------------------------------------------------------------
** Retrieving Aggregates
---------------------------------------------------------------------------------------------------------------------------
** Inserting & Updating Models
---------------------------------------------------------------------------------------------------------------------------
** insert data if image is available or not // Image upload
---------------------------------------------------------------------------------------------------------------------------
** Image,File set Download option from directory
---------------------------------------------------------------------------------------------------------------------------
** View / show image (jpg,jpeg,png), pdf or doc,txt file differently ...
---------------------------------------------------------------------------------------------------------------------------
** Email setting / Reset password
---------------------------------------------------------------------------------------------------------------------------
** Passing student id and attendance using array Roll call/ attendance
---------------------------------------------------------------------------------------------------------------------------
** Multiple authentication / Admin authentication
---------------------------------------------------------------------------------------------------------------------------
** Example of Single and group Middleware(how to create and use)
---------------------------------------------------------------------------------------------------------------------------
** User Permission using Middleware
---------------------------------------------------------------------------------------------------------------------------
** Example of Using pagination lots of built in function of pagination
---------------------------------------------------------------------------------------------------------------------------
** Example of Live Search Using Ajax query with get method
---------------------------------------------------------------------------------------------------------------------------
** Insert,Delete or edit data in bootstrap model using jquery ajax
---------------------------------------------------------------------------------------------------------------------------
** Insert data with laravel ajax with post method
---------------------------------------------------------------------------------------------------------------------------
** Image and text upload from same form with validation
---------------------------------------------------------------------------------------------------------------------------
** show image preview before upload  / show image instant select it (javascript)
---------------------------------------------------------------------------------------------------------------------------
** jquery some important function like id,attr,html,text,val etc
---------------------------------------------------------------------------------------------------------------------------
** Redirect user different pages according to their access role
--------------------------------------------------------------------------------------------------------------------------
** Redirect user to different pages according to role
--------------------------------------------------------------------------------------------------------------------------
** Multiple Authentication / ACL / Redirect user different pages according to their access role from route page...
--------------------------------------------------------------------------------------------------------------------------
** Access Controll using isUserOrAdmin middleware in web.php from route folder
--------------------------------------------------------------------------------------------------------------------------
** Check is Admin or is user from the isUserOrAdmin middleware
--------------------------------------------------------------------------------------------------------------------------
** Menu add or remove active class with jquery
--------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
					#1 Description of Index
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

===========================================================================================================================
To remove migrate error OR artisan error
===========================================================================================================================

 (1071 Specified key was too long; max key length is 767 bytes")
	  G:\xampp\htdocs\laravel_5.6\vendor\laravel\framework\src\Illuminate\Database\Connection.php:458)
---------------------------------------------------------------------------------------------------------------------------
1.Add this below line..
---------------------------------------------------------------------------------------------------------------------------
use Illuminate\Support\Facades\Schema;//to remove migrate error

in app\Providers folder's AppServiceProvider.php file's  AppServiceProvider classes top area

2. and add this below line's to boot() method of the same class
---------------------------------------------------------------------------------------------------------------------------
Schema::defaultStringLength(191);//to remove migrate error


3. change app/config /database.php file engine by below line
---------------------------------------------------------------------------------------------------------------------------
'engine' => 'InnoDB ROW_FORMAT=DYNAMIC',
---------------------------------------------------------------------------------------------------------------------------

==========================================================================================================================
4.To Remove public from url add this .htaccess file Rote Directiry...
==========================================================================================================================

<IfModule mod_rewrite.c>
<IfModule mod_negotiation.c>
	Options -MultiViews -Indexes
</IfModule>

RewriteEngine On

# Handle Authorization 		Header
RewriteCond %{HTTP:Authorization} .
RewriteRule .* - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

# Redirect Trailing Slashes If Not A 			Folder...
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_URI} (.+)/$
RewriteRule ^ %1 [L,R=301]

# Handle Front Controller...
			RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^ index.php [L]
</IfModule>	




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				#2. Running Database Migrations By Ahmed ullah-Chittagong
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
---------------------------------------------------------------------------------------------------------------------------
To see all available artisan command --> php artisan
---------------------------------------------------------------------------------------------------------------------------
To generat key 		 --> php artisan key:generate
---------------------------------------------------------------------------------------------------------------------------
To create authentication --> php artisan make:auth
---------------------------------------------------------------------------------------------------------------------------
To create table 	 --> php artisan make:migration create_test_table --create=test
---------------------------------------------------------------------------------------------------------------------------
To create controller 	 --> php artisan make:controller PhotoController --resource
---------------------------------------------------------------------------------------------------------------------------
To migrate table 	 --> php artisan migrate
---------------------------------------------------------------------------------------------------------------------------
To migrate:rollback  	 --> php artisan migrate:rollback
---------------------------------------------------------------------------------------------------------------------------
To rollback + migrate  	 --> php artisan migrate:refresh
---------------------------------------------------------------------------------------------------------------------------
php artisan migrate:refresh --step=5 -> It will remove last 5 table from database
---------------------------------------------------------------------------------------------------------------------------
To see all created route --> php artisan route:list
---------------------------------------------------------------------------------------------------------------------------
Create middleware using artisan--> php artisan make:middleware admin (admin is example of middleware name)
---------------------------------------------------------------------------------------------------------------------------




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				#3.Default Authentication
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
---------------------------------------------------------------------------------------------------------------------------
## Logout
Route::get('/logout','\App\Http\Controllers\Auth\LoginController@logout');
---------------------------------------------------------------------------------------------------------------------------
## login
Route::get('/login','\App\Http\Controllers\Auth\LoginController@login');
---------------------------------------------------------------------------------------------------------------------------




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				# Conditionally viewing data
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
---------------------------------------------------------------------------------------------------------------------------
@if(success)
   <h2 class="alert alert-success">Success! Success Data here</h2>
@else
   <h2 class="alert alert-danger">Error! Data Not Found</h2>
@endif
---------------------------------------------------------------------------------------------------------------------------



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				# check login OR Not
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

---------------------------------------------------------------------------------------------------------------------------
## Check login // check login OR Not
---------------------------------------------------------------------------------------------------------------------------
   if (!Auth::check()) {
	   echo '<b>Login kore aso...</b>';
	}else{
		echo "<b>Thanks</b>. Your are now logged In";
	}
---------------------------------------------------------------------------------------------------------------------------
use belows line in the top of the class name to support checking authentication.
use Illuminate\Support\Facades\Auth;
---------------------------------------------------------------------------------------------------------------------------



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				# To redirect from controller function / method if not login
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

### To redirect from controller function/method if not login..###
if (!Auth::check()) {
   return redirect('/login');
}
---------------------------------------------------------------------------------------------------------------------------
### To redirect from login page after login once.###
if (Auth::check()) {
   return redirect('/home');
}
---------------------------------------------------------------------------------------------------------------------------

===========================================================================================================================
	Redirection code / Return / Redirect from a page in different ways
===========================================================================================================================
use Redirect; or use Illuminate\Support\Facades\Redirect;  in the top of the class name

1. return \Redirect::to('/student'); -> from where we want to redirect
OR
2. return redirect('/student'); Or
3. return view('pages.index'); Or
4. return view('pages.index', compact('variable'));

5.return back()->with('success', 'Category info updated Successfully');

6.Session::flash('success','Promocode has been deleted');
return redirect('promocode/list-promocodes');
===========================================================================================================================



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				Retrieve Session Value (Authentication) after login
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
---------------------------------------------------------------------------------------------------------------------------
1.{{ Auth::user()->name }}
2.{{ Auth::user()->email }}

//showing value afte checking
<?php if(Auth::user()): ?>
{{ Auth::user()->name }}
<?php endif; ?><br>
---------------------------------------------------------------------------------------------------------------------------




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
	# Routing Example url() and route()
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

Route::get('/home', 'HomeController@index')->name('home');
Uses:
-------

<a href="{{ url('/home') }}">Home</a>

url will show as /home
---------------------------------------------------------------------

Route::get('/tdd', 'HomeController@test')->name('test.aaa');
OR (same as )
Route::get('/tdd',['as'=>'test.aaa','uses' =>'HomeController@test']);

Uses:
-------
<a href="{{ route('test.aaa') }}">Test</a>
url will show as /tdd
===========================================================================================================================


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
	#4. Multiple authentication coping default auth's all folder and classes as Admin/ Admin authentication
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================

1.copy/paste Auth controller folder(with all class file) and rename with Admin 												---------------------------------------------------------------------------------------------------------------------------
2.change all namespace into the Admin folder with Admin(only namespace)
---------------------------------------------------------------------------------------------------------------------------
3.do same task for view folder and files
---------------------------------------------------------------------------------------------------------------------------
4.Change login page's form's action route to route('login'); to route('admin.login');and at the bottom change
	route('password.request'); to route('admin.password.request');
---------------------------------------------------------------------------------------------------------------------------
5.Do same change for email.blade.php file and reset.blade.php file into the password folder
---------------------------------------------------------------------------------------------------------------------------
6.create home.blade.php file into the admin folder coping auth  home.blade.php from view folder 									---------------------------------------------------------------------------------------------------------------------------
7.Create of same things as user route and copy it from using php artisan route:list and paste into the web.php file
---------------------------------------------------------------------------------------------------------------------------
8.create AdminController.php coping HomeController.php and rename as adminController 											---------------------------------------------------------------------------------------------------------------------------
9.commented middleware(auth) from adminController
---------------------------------------------------------------------------------------------------------------------------
10.change adminController index functin view(home) ti view(admin.home)
---------------------------------------------------------------------------------------------------------------------------
11.Create admin guard coping web guards from config/auth.php file
---------------------------------------------------------------------------------------------------------------------------
12.Create admin providers coping users providers from config/auth.php file
---------------------------------------------------------------------------------------------------------------------------
13.Create admin passwords coping users passwords from config/auth.php file
at the bottom...
---------------------------------------------------------------------------------------------------------------------------
14.create Admin Model coping User model into the app folder and rename as Admin
---------------------------------------------------------------------------------------------------------------------------
15.Change the $redirectTo variable from loginController of Admin folder $redirectTo="/home"; to $redirectTo="Admin/home";
---------------------------------------------------------------------------------------------------------------------------
16.Change the constructo of loginController,ForgotPasswordController,RegisterController and ResetPasswordController
adding admin  middleware like ....$this->middleware('guest:admin')->except('logout');
and change all $redirectTo variable
---------------------------------------------------------------------------------------------------------------------------
17.create table for admin using artisan
---------------------------------------------------------------------------------------------------------------------------
18.copy and paste user migration table's field to Admins table then migrate
---------------------------------------------------------------------------------------------------------------------------
19.copy showLoginForm functin from authenticatuse.php file and paste it into admin/LoginController.php file to
overwrite admin login form
---------------------------------------------------------------------------------------------------------------------------
20.uncomment middleware(auth) from adminController.php set $this->middleware('auth:admin'); this line
instead of $this->middleware('auth');
---------------------------------------------------------------------------------------------------------------------------
21.paste below code into the LoginController .this is copied from authenticateuser.php file

protected function guard()
	{
		return Auth::guard('admin');
	}
---------------------------------------------------------------------------------------------------------------------------
22.paste this code to LoginController.php file
use Illuminate\Support\Facades\Auth;
---------------------------------------------------------------------------------------------------------------------------
23.modify RedirectIfAuthenticated.php file into the middleware folder using below's code to redirect

public function handle($request, Closure $next, $guard = null){

	switch ($guard) {

	  case 'admin':


if (Auth::guard($guard)->check()) {

	return redirect('admin/home');

}
   break;



default:


if (Auth::guard($guard)->check()) {

	return redirect('/home');

}
	break;

	}
	return $next($request);

   }
---------------------------------------------------------------------------------------------------------------------------
24. Completed Multiple authentication
finally add belows code for Exception/Handler.php file's as unauthenticate function (may be it is optional)

Protected function unauthenticate($request,AuthenticationException $exception){

if($request->expectsJson()){
	return response()->json(['error'=>'Unauthenticated.'],40);
}
$guard = array_get($exception->guards(),0);

witch ($guard) {

	  case 'admin':


if (Auth::guard($guard)->check()) {

	return redirect()->guest(route('admin.login'));

}
   break;



default:


if (Auth::guard($guard)->check()) {

	return redirect('/login');

}
	break;

  }

}
===========================================================================================================================




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				#5. Laracollective Form By Ahmed ullah-Chittagong
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
1.Installation
Begin by installing this package through Composer. Edit your project's composer.json file to require laravelcollective/html.

composer require "laravelcollective/html":"^5.4.0"
---------------------------------------------------------------------------------------------------------------------------
Next, add your new provider to the providers array of config/app.php:

  'providers' => [
	// ...
	Collective\Html\HtmlServiceProvider::class,
	// ...
  ],
---------------------------------------------------------------------------------------------------------------------------

Finally, add two class aliases to the aliases array of config/app.php:

  'aliases' => [
	// ...
	  'Form' => Collective\Html\FormFacade::class,
	  'Html' => Collective\Html\HtmlFacade::class,
	// ...
  ],
===========================================================================================================================

---------------------------------------------------------------------------------------------------------------------------
{{ Form::open(array('url'=>'/sess')) }}     {{ Form::close() }}
---------------------------------------------------------------------------------------------------------------------------
OR
---------------------------------------------------------------------------------------------------------------------------
<form method="POST" action="{{ route('register') }}">
 @csrf </form>
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
{{ Form::text('field_name',$value = null,['class'=>'form-control','placeholder'=>'Name']) }}
Will produce	--- <input type="text" name="field_name" class="form-control" value="" placeholder="Name">
---------------------------------------------------------------------------------------------------------------------------
2.
---------------------------------------------------------------------------------------------------------------------------
{{ Form::label('isbn_num','Isbn Num') }}
{{ Form::text('isbn_num','Type ISBN Num', ['class'=>'form-control']) }}
Will produce	--- <input type="text"  class="form-control" name="isbn_num" placeholder="Type ISBN Num">
---------------------------------------------------------------------------------------------------------------------------
3.
---------------------------------------------------------------------------------------------------------------------------
{{  Form::submit('Click Me!', ['class'=>'btn btn-success']) }}
Will produce	--- <input type="submit" class="btn btn-success" value="Submit">
---------------------------------------------------------------------------------------------------------------------------
4.
---------------------------------------------------------------------------------------------------------------------------
{{ Form::textarea('notes') }}
Will produce	--- <textarea name="notes" cols="50" rows="10"></textarea>
---------------------------------------------------------------------------------------------------------------------------
5.
---------------------------------------------------------------------------------------------------------------------------
You can pass the value as the second argument.
{{ Form::textarea('notes', '3 < 4') }}
The value will be escaped.
<textarea name="notes" cols="50" rows="10">3 &lt; 4</textarea>
---------------------------------------------------------------------------------------------------------------------------
6.
---------------------------------------------------------------------------------------------------------------------------
Additional options can be passed as a third argument. This must be an array.
{{ Form::textarea('notes', null, ['class' => 'field']) }}
This will add the class "field" to the text area.
<textarea class="field" name="notes" cols="50" rows="10"></textarea>
---------------------------------------------------------------------------------------------------------------------------
7.
---------------------------------------------------------------------------------------------------------------------------
{{ Form::textarea('notes', null, ['size' => '30x5']) }}
Will produce	--- <textarea name="notes" cols="30" rows="5"></textarea>
---------------------------------------------------------------------------------------------------------------------------
8.
{{ Form::password('password', ['class' => 'form-control']); }}
Will produce	--- <input class="form-control" name="password" type="password" value="">
---------------------------------------------------------------------------------------------------------------------------



===========================================================================================================================
To update composer --    composer update
===========================================================================================================================



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				#6. Datatype in Laravel --By Ahmed ullah-Chittagong
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
---------------------------------------------------------------------------------------------------------------------------
#1. $table->increments('increments');
will produce --> increments Primary int(10) UNSIGNED Not Null  Default None AUTO_INCREMENT
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->tinyInteger('notification')->nullable();  ///will produce default null
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
set default value
$table->integer('user_status')->default(0);
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->integer('bank_id')->length(11);
oR $table->integer('bank_id');
bank_id  int(11)   Not null 	default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#10. $table->bigIncrements('bigIncrements');
will produce --> bigIncrements Primary 	bigint(20) UNSIGNED Not Null Default None  AUTO_INCREMENT
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#11. $table->tinyIncrements('tinyIncrements');
will produce --> tinyIncrements Primary tinyint(3) UNSIGNED  Not Null Default None  AUTO_INCREMENT
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#9. $table->mediumIncrements('mediumIncrements');
will produce --> mediumIncrements  Primary  mediumint(8)  UNSIGNED  Not Null  Default None AUTO_INCREMENT
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#2. $table->string('string');
will produce --> string	varchar(191) utf8mb4_unicode_ci -Not Null - Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#3. $table->string('string',100);
will produce --> string	varchar(100) utf8mb4_unicode_ci -Not Null - Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#4. $table->multiLineString('multiLineString');
will produce -->multiLineString  multilinestring -Not Null - Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#5. $table->longText('longText');
will produce --> longText  longtext  utf8mb4_unicode_ci -Not Null - Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#6. $table->char('char',100);
will produce --> char char(100) utf8mb4_unicode_ci -Not Null - Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#7. $table->point('point');
will produce --> point point utf8mb4_unicode_ci -Not Null - Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#8. $table->integer('integer');
will produce --> integer  int(11)  Not No  Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#11. $table->tinyInteger('tinyInteger');
will produce --> tinyInteger 	tinyint(4) Not Null Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#12.  $table->bigInteger('bigInteger');
will produce --> bigInteger bigint(20) 	Not Null Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#13. $table->binary('binary');
will produce --> binary blob  Not Null  Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
#14. $table->boolean('boolean');
will produce --> boolean tinyint(1)  Not Null  Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->decimal('decimal',8,2);
will produce --> decimal decimal(8,2)  Not Null  Default None
---------------------------------------------------------------------------------------------------------------------------
$table->double('double',8,2);
enum 	enum('easy', 'hard') 	utf8mb4_unicode_ci Not Null  Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->float('float',8,2);
will produce --> double(8,2)  Not Null  Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->geometryCollectio('geometryCollection');
will produce --> geometryCollection geometrycollection Not Null  Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->date('date');
will produce --> date date Not Null  Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->dateTime('dateTime');
will produce -->
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->dateTimeTZ('dateTimeTZ');
will produce --dateTimeTZ datetime Not Null  Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->year('year');
will produce --> year 	year(4) Not Null  Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->TimeTZ('timeTZ');
will produce --> timeTZ time Not Null  Default None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->ipAddress('ipAddress');
will produce --> ipAddress  varchar(45) utf8mb4_unicode_ci  No 	None
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->json('json');
will produce -->
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$table->jsonb('jsonb');
will produce -->
---------------------------------------------------------------------------------------------------------------------------



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				#7. Form validation in controller, By Ahmed ullah-Chittagong
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
---------------------------------------------------------------------------------------------------------------------------
	Update Data with validation
---------------------------------------------------------------------------------------------------------------------------
 public function store(Request $request){
		$validatedDatad = $request->validate([

			'aboutusTitle' => 'required|unique:tbl_aboutus' //it will take unique title value

			'aboutusDetails' =>'required',
		'categoryName'  =>'required' //it will take
	 ]);

			 $updateInfo = DB::table('aboutus')
				->where('id', 1)->update(array(
					'aboutusTitle'=>$validatedDatad['aboutusTitle'],
					'aboutusDetails'=>$validatedDatad['aboutusDetails']
				));

	  if ($updateInfo) {
		 Session::put('message','<div class="alert alert-success">Updated successfully.../div>');
	  }else{
		  Session::put('message','<div class="alert alert-danger">Nothing to  Update</div>');
	 }
	  // will redirect /student route after success or fails...
	   return Redirect::to('/about-us');

	}
===========================================================================================================================
 public function store(Request $request){
   $validatedDatad = $request->validate([
		 'name' => 'required|max:20',
		 'email' =>'required|email',
		 'phone' =>'required||numeric' //numeric only support number
	 ]);

	 $insrtData = DB::table('student')->insert($validatedDatad);
	  if ($insrtData) {
		Session::put('message','Student Added successfully...');
	 }
	 // will redirect /student route after success or fails...
	   return Redirect::to('/student');
   }
===========================================================================================================================
		Image and text upload from same form with validation
===========================================================================================================================
public function SaveSlider(Request $request){

		$sliderimage = $request->file('sliderimage');
		request()->validate([
			'sliderimage' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
		]);

	$validatedDatad = $request->validate([
		'yelloheading'  =>'required',
		'bigheading'    =>'required',
		'link'          =>'required',
		'description'   =>'required',
		'link'          =>'required'
	]);

	if ($sliderimage) {
		$image_name = str_random(20);
		$ext = strtolower($sliderimage->getClientOriginalExtension() );
		$image_full_name = $image_name.'.'.$ext;
		$upload_path = 'upload_images/slider';
		$image_url = $upload_path.$image_full_name;
		$success = $sliderimage->move($upload_path,$image_full_name);

		if ($success) {
		   $addslide = DB::table('slider')->insert(array(
				'yelloheading' =>$validatedDatad['yelloheading'],
				'bigheading'   =>$validatedDatad['bigheading'],
				'link'         =>$validatedDatad['link'],
				'description'  =>$validatedDatad['description'],
				'sliderimage'  =>$sliderimage
			));
		}

		if ($addslide) {
		   Session::put('message','<div class="alert alert-success">Slide Added successfully...</div>');
		}else{
			Session::put('message','<div class="alert alert-danger">Failed to add slide</div>');
		}
		return Redirect::to('/add-slide');
	}
}

===========================================================================================================================
  showing validation message with error and success message and text upload from same form with validation
===========================================================================================================================
<!-- viewing validation error msg -->
	@if ($errors->any())
		<div class="alert alert-danger">
			<ul>
				@foreach ($errors->all() as $error)
					<li>{{ $error }}</li>
				@endforeach
			</ul>
		</div>
	@endif
<!--end viewing validation error msg -->



<!-- viewing validation error msg -->
@if ($errors->any())
	<div class="alert alert-danger">
		<ul>
			@foreach ($errors->all() as $error)
				<li>{{ $error }}</li>
			@endforeach
		</ul>
	</div>
@endif
<!--end viewing validation error msg
---------------------------------------------------------------------------------------------------------------------------
//view error message in form field...
---------------------------------------------------------------------------------------------------------------------------
<div class="form-group row {{$errors->has('percentage') ? 'has-error' : ''}}">//will add class has-error
{{ Form::text('percentage',null,['class'=>'form-control']) }}

@if($errors->has('percentage'))
	<span class="help-block">
	{{ $errors->first('percentage') }} //will shwo error msg
	</span>
@endif
</div>










                        ---------------------------------------------------------------------------------------------------------------------------
                           //1.for success message...
                        ---------------------------------------------------------------------------------------------------------------------------
                           //for success message by me
@if(Session::has('message'))
		{{ Session::get('message') }}
		<!-- to unset/remove session data after showing -->
		{{ Session::put('message',null) }}
		@endif	


---------------------------------------------------------------------------------------------------------------------------
   //2. OR another one for success message...
---------------------------------------------------------------------------------------------------------------------------
 <!-- view session message after success or fail -->
	<?php $message = Session::get('message'); ?>

	<?php if( $message): ?>
		<div class="alert alert-success">
			{{ Session::get('message') }}
		</div>

		{{ Session::put('message',null) }}
	<?php endif; ?>
<!-- end view session message after success or fail -->

----------------------------------------------------------------------------------------------------------------------------
<!-- 2nd way -->
	@if (session('success'))
		<div class="alert alert-success">
			<a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a> {{ session('success') }}
		</div>
	@endif
<!-- end 2nd way -->

----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------

===========================================================================================================================
	Update image and Data using validation with or without selecting  new image
===========================================================================================================================
   public function SaveUpdateSlider(Request $request){
	 $id = $request->input('id');
	 $sliderimage = $request->file('sliderimage');//for both condition
	 //if not select new image
	 $oldImage = DB::table('slider')->where('id',$id)->first();
	 $oldImageName = $oldImage->sliderimage;

	if (!$sliderimage) {
		$validatedData = $request->validate([
			'yelloheading'  =>'required',
			'bigheading'    =>'required',
			'link'          =>'required',
			'description'   =>'required',
			'link'          =>'required'
		]);

		$updateSlide       =  DB::table('slider')->where('id', $id)->update(array(
			'yelloheading' => $validatedData['yelloheading'],
			'bigheading'   => $validatedData['bigheading'],
			'link'         => $validatedData['link'],
			'description'  => $validatedData['description'],
			'sliderimage'  => $oldImageName
		));

		if ($updateSlide) {
		   Session::put('message','<div class="alert alert-success">Updated successfully...</div>');
		}else{
			Session::put('message','<div class="alert alert-danger">Nothing to update</div>');
		}return Redirect::to('/manage-slider');
	}

	//when select new image....
	if($sliderimage){
		request()->validate([
			'sliderimage' => 'required|image|mimes:jpeg,png,jpg,gif,svg|max:2048',
		]);

		$validatedData2 = $request->validate([
			'yelloheading'  =>'required',
			'bigheading'    =>'required',
			'link'          =>'required',
			'description'   =>'required',
			'link'          =>'required'
		]);

		if ($sliderimage) {
			$image_name = str_random(20);
			$ext = strtolower($sliderimage->getClientOriginalExtension() );
			$image_full_name = $image_name.'.'.$ext;
			$upload_path = 'upload_images/slider/';
			$image_url = $upload_path.$image_full_name;
			$success = $sliderimage->move($upload_path,$image_full_name);

			if ($success) {
			   $updateSlide        =  DB::table('slider')->where('id', $id)->update(array(
					'yelloheading' => $validatedData2['yelloheading'],
					'bigheading'   => $validatedData2['bigheading'],
					'link'         => $validatedData2['link'],
					'description'  => $validatedData2['description'],
					'sliderimage'  => $image_url
				));
			}

			if ($updateSlide) {
			   Session::put('message','<div class="alert alert-success">Slide Added successfully...</div>');
			}else{
				Session::put('message','<div class="alert alert-danger">Failed to add slide</div>');
			}
				return Redirect::to('/manage-slider');
		}

		//if image is available in db then unlik from folder
		if ($oldImageName) {
			unlink($oldImageName);
		}
	}
}//end SaveUpdateSlider function
===========================================================================================================================




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				#8.Query Builder Class, By Ahmed ullah-Chittagong
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
---------------------------------------------------------------------------------------------------------------------------
$users = DB::table('users')->get();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$foodItems = DB::table('food_items')->limit(5)->get(); $foodItems = DB::table('food_items')->inRandomOrder()->limit(5)->get();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$foodItems = DB::table('food_items')->inRandomOrder()->limit(5)->get();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
DB::table('imageManagement')
	->orderBy('id','DESC')
	->paginate(5);
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$users = DB::table('users')->distinct()->get();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
//query from multiple table
$users = DB::table('users')
		->join('contacts', 'users.id', '=', 'contacts.user_id')
		->join('orders', 'users.id', '=', 'orders.user_id')
		->select('users.*', 'contacts.phone', 'orders.price')
		->get();

//select query from two table table
$FoodItems = DB::table('food_items')
		->join('food_category', 'food_items.foodCat', '=', 'food_category.id')
		->select('food_items.*', 'food_category.categoryName')
		->get();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$search = DB::table('student')->where('name','like','%'.$name.'%')->get();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$totalRow = DB::table('attendance')->count(); Will return total row
---------------------------------------------------------------------------------------------------------------------------
$users = DB::table('users')->select('name', 'email as user_email')->get();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
-Get only atttime distinct value
$checkDate = DB::table('attendance')->select('atttime')->distinct()->get();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
-Get all distinct value
$checkDate = DB::table('attendance')->select()->distinct()->get();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$users = DB::table('users')->where('id', $id)->first();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
$updateInfo = DB::table('attendance')->where('attId', $attId)->update(array('attendance'=>'absent'));
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
delete image with unlink/remove from directory folder
---------------------------------------------------------------------------------------------------------------------------




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
			 Eloquent Model/ Eloquent  Query  == By Ahmed ullah-Chittagong
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

---------------------------------------------------------------------------------------------------------------------------
1. use below's code in user table's Model Class
---------------------------------------------------------------------------------------------------------------------------
public function profile()
	{
	return $this->hasOne('App\Profile');
	}

---------------------------------------------------------------------------------------------------------------------------
2. User table's pirmary id is profile table's foreign key
  so set below's code in profile table's Model Class
---------------------------------------------------------------------------------------------------------------------------
  public function user()
  {
	return $this->belongsTo('App\User');
   }
 ---------------------------------------------------------------------------------------------------------------------------
	3. and use below's code in profile table's migration file
  ---------------------------------------------------------------------------------------------------------------------------

$table->integer('user_id')->unsigned();
$table->foreign('user_id')->references('id')->on('users');
===========================================================================================================================
---------------------------------------------------------------------------------------------------------------------------
Defining Models...........
---------------------------------------------------------------------------------------------------------------------------
php artisan make:model Flight
---------------------------------------------------------------------------------------------------------------------------
If you would like to generate a database migration when you generate the model,
				  you may use the --migration or -m option:
---------------------------------------------------------------------------------------------------------------------------
php artisan make:model Flight --migration
php artisan make:model Flight -m
---------------------------------------------------------------------------------------------------------------------------




===========================================================================================================================
					Retrieving Models
===========================================================================================================================
Retrieving Models
---------------------------------------------------------------------------------------------------------------------------
use App\Flight;
$flights = App\Flight::all();

foreach ($flights as $flight) {
	echo $flight->name;
}
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
Adding Additional Constraints
---------------------------------------------------------------------------------------------------------------------------
$flights = App\Flight::where('active', 1)
		   ->orderBy('name', 'desc')
		   ->take(10)
		   ->get();
---------------------------------------------------------------------------------------------------------------------------

===========================================================================================================================
					Retrieving Single Models / Aggregates
===========================================================================================================================
Retrieving Single Models / Aggregates
---------------------------------------------------------------------------------------------------------------------------
Of course, in addition to retrieving all of the records for a given table, you may also retrieve single records
using find or first. Instead of returning a collection of models, these methods return a single model instance:

---------------------------------------------------------------------------------------------------------------------------
// Retrieve a model by its primary key...
---------------------------------------------------------------------------------------------------------------------------
$flight = App\Flight::find(1);

// Retrieve the first model matching the query constraints...
$flight = App\Flight::where('active', 1)->first();
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
You may also call the find method with an array of primary keys, which will return a collection of the matching records:
---------------------------------------------------------------------------------------------------------------------------
$flights = App\Flight::find([1, 2, 3]);
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
Not Found Exceptions
Sometimes you may wish to throw an exception if a model is not found. This is particularly useful in routes or controllers.
The findOrFail and firstOrFail methods will retrieve the first result of the query; however, if no result is found,
a  Illuminate\Database\Eloquent\ModelNotFoundException will be thrown:

---------------------------------------------------------------------------------------------------------------------------
$model = App\Flight::findOrFail(1);
$model = App\Flight::where('legs', '>', 100)->firstOrFail();
---------------------------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------------------------
If the exception is not caught, a 404 HTTP response is automatically sent back to the user. It is not necessary to write
explicit checks to return 404 responses when using these methods:
---------------------------------------------------------------------------------------------------------------------------
Route::get('/api/flights/{id}', function ($id) {
  return App\Flight::findOrFail($id);
});
---------------------------------------------------------------------------------------------------------------------------


===========================================================================================================================
					Retrieving Aggregates
===========================================================================================================================

---------------------------------------------------------------------------------------------------------------------------
You may also use the count, sum, max, and other aggregate methods provided by the query builder. These methods return the
appropriate scalar value instead of a full model instance:
---------------------------------------------------------------------------------------------------------------------------
$count = App\Flight::where('active', 1)->count();
$max = App\Flight::where('active', 1)->max('price');
---------------------------------------------------------------------------------------------------------------------------

===========================================================================================================================
				Inserting & Updating Models
===========================================================================================================================

---------------------------------------------------------------------------------------------------------------------------
Inserts
-----------------------------
To create a new record in the database, create a new model instance, set attributes on the model,
then call the save method:
---------------------------------------------------------------------------------------------------------------------------
public function store(Request $request){
		// Validate the request...
		$flight = new Flight;
		$flight->name = $request->name;
		$flight->save();
}
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
Updates
---------------------------------------------------------------------------------------------------------------------------
The save method may also be used to update models that already exist in the database. To update a model, you should
retrieve it, set any attributes you wish to update, and then call the  save method. Again, the updated_at timestamp
will automatically be updated, so there is no need to manually set its value:
---------------------------------------------------------------------------------------------------------------------------
$flight = App\Flight::find(1);
$flight->name = 'New Flight Name';
$flight->save();
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
Mass Updates
---------------------------------------------------------------------------------------------------------------------------
Updates can also be performed against any number of models that match a given query. In this example, all flights that
are active and have a destination of San Diego will be marked as delayed:
---------------------------------------------------------------------------------------------------------------------------
App\Flight::where('active', 1)
		->where('destination', 'San Diego')
		->update(['delayed' => 1]);
---------------------------------------------------------------------------------------------------------------------------



===========================================================================================================================
				Deleting Models
===========================================================================================================================

---------------------------------------------------------------------------------------------------------------------------
To delete a model, call the delete method on a model instance:
---------------------------------------------------------------------------------------------------------------------------
$flight = App\Flight::find(1);
$flight->delete();
---------------------------------------------------------------------------------------------------------------------------
Deleting An Existing Model By Key
In the example above, we are retrieving the model from the database before calling the delete method. However,
if you know the primary key of the model, you may delete the model without retrieving it. To do so, call the destroy method:
---------------------------------------------------------------------------------------------------------------------------
App\Flight::destroy(1);

App\Flight::destroy([1, 2, 3]);

App\Flight::destroy(1, 2, 3);
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
		Deleting Models By Query
---------------------------------------------------------------------------------------------------------------------------
Of course, you may also run a delete statement on a set of models. In this example, we will delete all flights that
are marked as inactive. Like mass updates, mass deletes will not fire any model events for the models that are deleted:
---------------------------------------------------------------------------------------------------------------------------
$deletedRows = App\Flight::where('active', 0)->delete();
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
Soft Deleting
---------------------------------------------------------------------------------------------------------------------------
In addition to actually removing records from your database, Eloquent can also "soft delete" models.
When models are soft deleted, they are not actually removed from your database. Instead, a deleted_at
attribute is set on the model and inserted into the database. If a model has a non-null deleted_at value,
the model has been soft deleted. To enable soft deletes for a model, use the Illuminate\Database\Eloquent\SoftDeletes
trait on the model and add the  deleted_at column to your $dates property:
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
// Retrieve a model by its primary key...
$flight = App\Flight::find(1);
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
// Retrieve the first model matching the query constraints...
$flight = App\Flight::where('active', 1)->first();
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
You may also call the find method with an array of primary keys, which will return a collection of the matching records:
$flights = App\Flight::find([1, 2, 3]);
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
Sometimes you may wish to throw an exception if a model is not found. This is particularly useful in routes or controllers.
The findOrFail and firstOrFail methods will retrieve the first result of the query;
$model = App\Flight::findOrFail(1); OR
$model = App\Flight::where('legs', '>', 100)->firstOrFail();
---------------------------------------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------------------------------------
Retrieving Aggregates
You may also use the count, sum, max, and other aggregate methods provided by the query builder.
$count = App\Flight::where('active', 1)->count();
$max = App\Flight::where('active', 1)->max('price');
---------------------------------------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------------------------------------
// Retrieve a model by its primary key...
$flight = App\Flight::find(1);
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
// Retrieve the first model matching the query constraints...
$flight = App\Flight::where('active', 1)->first();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
You may also call the find method with an array of primary keys, which will return a collection of the matching records:
$flights = App\Flight::find([1, 2, 3]);
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
Sometimes you may wish to throw an exception if a model is not found. This is particularly useful in routes or controllers.
The findOrFail and firstOrFail methods will retrieve the first result of the query;

$model = App\Flight::findOrFail(1); OR
$model = App\Flight::where('legs', '>', 100)->firstOrFail();
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
Retrieving Aggregates

You may also use the count, sum, max, and other aggregate methods provided by the query builder.

$count = App\Flight::where('active', 1)->count();
$max = App\Flight::where('active', 1)->max('price');
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


 public function destroy($id){
	//get image name
   $delImageName = DB::table('imageManagement')
			->select('pro_image')
			->where('id',$id)->first();

	//if image is available in db then unlik from folder
	if ($delImageName->pro_image) {
		unlink( $delImageName->pro_image);
	}
   //delete everything from db after unlink image
   $delImage = DB::table('imageManagement')->where('id',$id)->delete();

   if ($delImage) {
	   Session::put('message','Image deleted successfully...');
	}
	return Redirect::to('/profile');
}
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
	insert data if image is available or not // Image upload
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
public function store(Request $request)
	{
	$image = $request->file('pro_image');

	if ($image) {
		$image_name = str_random(20);
		$ext = strtolower($image->getClientOriginalExtension() );
		$image_full_name = $image_name.'.'.$ext;
		$upload_path = 'upload_images/';
		$image_url = $upload_path.$image_full_name;
		$success = $image->move($upload_path,$image_full_name);

		if ($success) {
			$data = array();
			$data['image_name'] = $request->input('image_name');
			$data['pro_image'] = $image_url;
			DB::table('imageManagement')->insert($data);
			Session::put('message','File uploaded successfully..');
			return Redirect::to('/profile');
		}

	}else{
		$data = array();
		$data['image_name'] = $request->input('image_name');
		$data['pro_image'] = '';
		DB::table('imageManagement')->insert($data);
		Session::put('message','File uploaded successfully..');
		return Redirect::to('/profile');

	 }
 }
---------------------------------------------------------------------------------------------------------------------------



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				#9.Image,File set Download option from directory, By Ahmed ullah-Chittagong
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

---------------------------------------------------------------------------------------------------------------------------
Download image/File from directoyr..
---------------------------------------------------------------------------------------------------------------------------
<a class="btn btn-info btn-sm" href="{{$viewImg->image_name }}" download="{{$viewImg->image_name}}">Download</a>
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				#10. View / show image (jpg,jpeg,png), pdf or doc,txt file differently ...
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

				<th>Preview Files :</th>
				<td>
					<?php
						//checking file extension to view image and pdf file seperate way
						$fileName          = $dValidatorById->notification_file;
						$explodeFileName   = explode(".", $fileName);
						$FileExtension     = end($explodeFileName);

					if( $FileExtension =='jpeg' || $FileExtension=='png' || $FileExtension=='jpg'){  ?>
						<img width="400" height="250" src="{{ asset('upload_images\abc') }}/{{ $dValidatorById->notification_file }}" alt="">

					<?php }else{ ?>

						 <iframe style="background:#fff!important" width="600" height="450"
				src="{{ asset('upload_images\abc') }}/{{ $dValidatorById->notification_file }}">
						 </iframe>
					<?php } ?>
				</td>


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
				#10. Email setting / Reset password --By Ahmed ullah-Chittagong
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
.env file setting ...
----------------------------
MAIL_DRIVER=smtp
MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=MyUsername@gmail.com
MAIL_PASSWORD=MyPassword
===========================================================================================================================

Sublime text Shortcut
-----------------------
ctrl+p = To findout a sublime file from anywhere


===========================================================================================================================
===========================================================================================================================
---------------------------------------------------------------------------------------------------------------------------
<!-- passing student id and attendance using array Roll call/ attendance / -->
---------------------------------------------------------------------------------------------------------------------------
<input type="radio" value="present" name="attendance[<?php echo $student->id; ?>]">P
<input type="radio" value="absent" name="attendance[<?php echo $student->id; ?>]">A
---------------------------------------------------------------------------------------------------------------------------
<!-- passing student id and attendance using array -->
$data['attendance'] = $request->input('attendance');
$attendance = $data['attendance'];

foreach ($attendance as $stId => $value) {
			$takeAttendance = DB::table('attendance')->insert(
				array(
					'stId' => $stId,
					'attendance'=>$value,
					'atttime'=>date('Y-m-d'),
				)
			);
		}
---------------------------------------------------------------------------------------------------------------------------
===========================================================================================================================



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
		#11. Example of Single and group Middleware(how to create and use)
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

===========================================================================================================================
To use middleware need to follow 3 steps
===========================================================================================================================
1. Create middleware using artisan--- php artisan make:middleware admin (admin is example of middleware name)
---------------------------------------------------------------------------------------------------------------------------
2.Register middleware name in kernal.php's $routemiddleware like..
'admin'=> \App\Http\Middleware\Admin::class,
---------------------------------------------------------------------------------------------------------------------------
3.create logic in our middleware page like Admin.php which we create as a middleware
---------------------------------------------------------------------------------------------------------------------------
  example:
  public function handle($request, Closure $next){
		if (Auth::check()) { //will return true or false according user login or not
			return $next($request);
		}else{
			return redirect('/login');
	}
  }
---------------------------------------------------------------------------------------------------------------------------
4.Assign middleware in Routes/web.php
---------------------------------------------------------------------------------------------------------------------------
//Example of single route
Route::get('/student','studentController@index')->middleware('admin');

//Example of group middleware
Route::group(['middleware'=>['admin']],function(){

   Route::get('/edit/{id}','studentController@edit');

});
===========================================================================================================================




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
		# User Permission using Middleware
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
-----------------------------------------------------------------------------------------------------------

class UserManagementMiddelware
{
	/**
	 * Handle an incoming request.
	 *
	 * @param  \Illuminate\Http\Request  $request
	 * @param  \Closure  $next
	 * @return mixed
	 */
	public function handle($request, Closure $next)
	{
		$id = auth()->user()->id;

		$module_id = $order_id = Module::where('slug','user-management')->value('id');;
		$permission = Permission::where(['user_id'=>$id, 'module_id' => $module_id])->value('status');

		if ($permission == 0)
		{
			$notification = array(
				'message' => 'You Don\'t Have Access to this page',
				'alert-type' => 'error'
		  );

			return back()->with($notification);
		}

		return $next($request);
	}
}

---------------------------------------------------------------------------------------------------------------------------



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
		#12. Example of Using pagination lots of built in function of pagination
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
				A.In the controller ........
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
//will show paginating menu with page number

$students = DB::table('student')->orderBy('id','desc')->paginate(5);


			OR
//will show paginating using only previous and next button

//$students = DB::table('student')->simplePaginate(4);
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
				B. In the view .....
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
1. echo $students->links();        -->will show the pagination bar
---------------------------------------------------------------------------------------------------------------------------
2. echo $students->total();        -->will show the number of total rows of that table
---------------------------------------------------------------------------------------------------------------------------
3. echo $students->count(); 	   -->will show the show the number of total rows of this page
---------------------------------------------------------------------------------------------------------------------------
4. echo $students->currentPage();  -->will show the current page number
---------------------------------------------------------------------------------------------------------------------------
5. echo $students->firstItem();    -->will show the position of the current page's first row number
---------------------------------------------------------------------------------------------------------------------------
6. echo $students->hasMorePages(); -->if next page available it will show 1 others nothing
---------------------------------------------------------------------------------------------------------------------------
7. echo $students->lastItem();     -->will show the total number of rows still now
---------------------------------------------------------------------------------------------------------------------------
8. echo $students->lastPage();     -->will show the last page's number (not available when using simplePaginate)
---------------------------------------------------------------------------------------------------------------------------
9. echo $students->nextPageUrl();  -->will show the next pages url
---------------------------------------------------------------------------------------------------------------------------
10.echo $students->perPage();	   -->will show the number of total rows per pages
---------------------------------------------------------------------------------------------------------------------------
11.echo $students->previousPageUrl();-->will show the previous pages url
---------------------------------------------------------------------------------------------------------------------------
12.echo $students->url($page); -->will return the targeted pages url // like.. echo $students->url(4);
---------------------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------------------
					==========================================================================================================================




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
		#13.Example of Live Search Using Ajax query with get method
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
---------------------------------------------------------------------------------------------------------------------------
1.Route
---------------------------------------------------------------------------------------------------------------------------
// search student data by name using ajax

Route::get('/ajax',function(){
  return view('ajaxTest');
});

Route::get('ahmed','AjaxController@index');

---------------------------------------------------------------------------------------------------------------------------
2.view
---------------------------------------------------------------------------------------------------------------------------
<script type="text/javascript">

function text(){
  var name = $('#name').val();
  //var dataString = 'name='+name;
  //alert(typeof(dataString));
  $.ajax({
	type:"get",
	url:"{{ URL::to("ahmed") }}",
	data:{name:name},
	datatype:'html',
	success: function(data){
	  $('#data').html(data);
	}
  });
}

 </script>

---------------------------------------------------------------------------------------------------------------------------
	3.Controller AjaxController@index
---------------------------------------------------------------------------------------------------------------------------
 public function index(Request $request){

echo $name =  $request->name;

$result = DB::table('student')->where('name','like','%'.$name.'%')->get();

foreach ($result as $student) {

echo "<tr><td>".$student->id."</td>";

echo "<td>".$student->name."</td>";

echo "<td>".$student->email."</td>";

echo "</td></tr>";
 }

}
---------------------------------------------------------------------------------------------------------------------------
===========================================================================================================================






@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
	#14.Insert,Delete or edit data in bootstrap model using jquery
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

<!-- Scripts -->
<script src="{{ asset('public/js/jquery-3.2.1.min.js') }}"></script>

<script type="text/javascript">
  $(document).ready(function(){

	$("td#taskList").each(function(){
	  $(this).click(function(){
		var txt = $(this).text();
		$("#taskField").val(txt);
		$("button#modelTitle").text("Edit Task");
	  });
	});

	$("button#addNewBotton").click(function(){
	  $("button#modelTitle").text("Add New Task");
	  $("#taskField").val('');
	  // to hide buttton
	  $("#addItem").show();
	  $("#deleteItem").hide();
	  $("#saveChanges").hide();
	});

  });
</script>
===========================================================================================================================




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
			 #15. Insert data with laravel ajax with post method
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

===========================================================================================================================
1.In the view page
===========================================================================================================================
<form>
	  <!-- passing _toke for post method -->
	  <input type="hidden" value="{{ csrf_token() }}" id="token"> //pass this for post method
	  <div class="form-group">
		<label for="recipient-name" class="col-form-label">Todo Task:</label>
		<input type="text" class="form-control" name="taskField" id="taskField">
	  </div>
	</form>


// insert data with ajax post method
	$("#addItem").click(function(){
	  var taskField = $("#taskField").val();
	  var token = $("#token").val();  //passing csrf token from form

	   $.ajax({
		type:'POST',
		url:"{{ URL::to('/addPost') }}",
		data:"taskField="+taskField+"&_token="+token,
		datatype:'html',
		success:function(data){
		  if (data == 'success'){
			 $("#success").show(1000);
			 $("#success").hide(4000);

			 //calling function to get all data after insert without refresh
			 getAlltodoList();
		  }
		  if (data == 'error'){
			$("#wrong").fadeIn(1000);
			$("#wrong").hide(8000);
		  }
		}
	  });
	});
===========================================================================================================================
	2.In the route page
===========================================================================================================================
Route::post('/addPost','TodoListController@saveTodolistWithAjax');

===========================================================================================================================
3.In the controller route page
===========================================================================================================================
  // insert todo data with ajax
 public function saveTodolistWithAjax(Request $request){
	$taskField = $request->input('taskField');
	$addData = DB::table('todolist')->insert(array('taskField' => $taskField));
	if ($addData) {
		echo 'success';
	}else{
		echo 'error';
	   }
  }
===========================================================================================================================




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
			 #16. Show image preview before upload  / show image instant select it (javascript)
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
<img id="oldPic" src="{{ URL::to('/') }}/{{ $foodItemsById->food_pic }}" alt="">//old pic to view from db to see current img
<img id="newPic" style="display: none" width="200"  src="" alt=""> //to show new pictue
//to upload file
<input type="file" name="food_pic" onchange="showImage.call(this)" id="food_pic" value="{{ $foodItemsById->food_pic }}">

<script>
   function showImage(){
	if (this.files && this.files[0]) {
	var obj = new FileReader();
	obj.onload = function(data){
	var newPic = document.getElementById('newPic');
	newPic.src = data.target.result;
	newPic.style.display = "block";
	}

	obj.readAsDataURL(this.files[0]);

	var oldPic = document.getElementById('oldPic');
	oldPic.style.display ='none';
   }
}
 </script>
===========================================================================================================================



@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
  #17.Jquery some important function like id,attr,html,text,val etc
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

<ul id='myid'>
  <li id='1'>First</li>
  <li id='2'>Second</li>
  <li id='3'>Third</li>
  <li id='4'>Fourth</li>
  <li id='5'>Fifth</li>
</ul>

$("#myid li").click(function() {
	alert(this.id); // id of clicked li by directly accessing DOMElement property
	alert($(this).attr('id')); // jQuery's .attr() method, same but more verbose
	alert($(this).html()); // gets innerHTML of clicked li
	alert($(this).text()); // gets text contents of clicked li
});

//If you are talking about replacing the ID with something:
$("#myid li").click(function() {
	this.id = 'newId';

	// longer method using .attr()
	$(this).attr('id', 'newId');
});
===========================================================================================================================




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
	#18.Multiple Authentication / ACL /Redirect user different pages according to their access role from route page...
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

// for authentication default code
Auth::routes();
Route::get('/home', 'HomeController@index')->name('home');
---------------------------------------------------------------------------------------------------------------------------
//1.change it by below code..
---------------------------------------------------------------------------------------------------------------------------
//redirect user to different page accordint their access controll
	Route::get('/home', function(){
//no one can get access home page without login (by Ahmed)
if (!Auth::check() ) {
	abort(404,'Sorry only user can access this page');
}

if( Auth::user()->user_type == 'admin') {
	return view('admin');

}elseif( Auth::user()->user_type == 'author') {
	return view('author');

}elseif( Auth::user()->user_type == 'user') {
	return view('user');
}
  });
===========================================================================================================================
2.Check is Admin or not from the isAdmin middleware
===========================================================================================================================
public function handle($request, Closure $next)
  {
	if (Auth::check() && $request->user()->user_status =='admin') {
		return $next($request);
	}else{
		//return redirect()->guest('error_404');
		//abort(404,'Sorry only user can access this page');
		return Redirect::to('/error');
	}
 }
===========================================================================================================================
3.Check is Admin or is user from the isUserOrAdmin middleware
===========================================================================================================================
  public function handle($request, Closure $next){
	   if ( (Auth::check()) && ($request->user()->user_status =='user' || $request->user()->user_status =='admin') ) {
			return $next($request);
		}else{
			//return redirect()->guest('error_404');
			//abort(404,'Sorry only user can access this page');
			return Redirect::to('error');
		}
	}
===========================================================================================================================
4.Access Controll using isAdmin middleware in web.php from route folder
===========================================================================================================================
//isAdmin only admin can get access this page
Route::get('/admin-list', function(){
	return view('Dashboard.admin-list');
})->middleware('isAdmin');
===========================================================================================================================
//error page it will show when a user try to get
//access other page out of his access label
Route::get('/error', function () {
	return view('error_404');
});
===========================================================================================================================
	5.Access Controll using isUserOrAdmin middleware in web.php from route folder
===========================================================================================================================
//isUser will give access to user or admin both of theme
Route::get('/user-data', function(){
	return view('Dashboard.user-data');
})->middleware('isUserOrAdmin');
===========================================================================================================================
	6.Dashboard.blade.php file for viewing or hiding link form user according to access role
===========================================================================================================================
	<div class="wrapper">
	<h2>Welcome to Dashboard</h2> <hr>
	<p>Only Admin can get Access All User and Author Data page And also Admin page</p>
	<p>But only User or Author can get access their own User/Author List and Data page....</p>
	<ul>
		@if(Auth::check() && (Auth::user()->user_status == 'admin') )
		<li><a href="{{ URL::to('/admin-list') }}">Admin List</a></li>
		@endif

		@if(Auth::check() && (Auth::user()->user_status == 'user') )
		<li><a href="{{ URL::to('/user-list') }}">User List</a></li>
		@endif

		@if(Auth::check() && (Auth::user()->user_status == 'user' || Auth::user()->user_status == 'admin') )
		<li><a href="{{ URL::to('/user-data') }}">User Data</a></li>
		@endif

		@if(Auth::check() && (Auth::user()->user_status == 'author'))
		<li><a href="{{ URL::to('/author-list') }}">Author List</a></li>
		@endif

		@if(Auth::check() && (Auth::user()->user_status == 'author' || Auth::user()->user_status == 'admin'))
		<li><a href="{{ URL::to('/author-data') }}">Author Data</a></li>
		@endif
	   </ul>
	  </div>
===========================================================================================================================




@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
===========================================================================================================================
	#19.menu add or remove active class with jquery
===========================================================================================================================
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
//1.jquery
=============================================================
   $(".resp-tabs-list li:first").addClass("active");
	//add and remove class for menu
	$('.resp-tabs-list li').click(function() {
		$('.resp-tabs-list li').removeClass('active');
		$(this).addClass('active');
	});

=============================================================
//2.css
.resp-tabs-list li.active {
	background: red !important;
}
.resp-tabs-list li.active a{
	color:#fff;
}
===========================================================================================================================

@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@




                    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
                    ===========================================================================================================================
                    #20. show and hide success message with jquery                    ===========================================================================================================================
{{--//showing success message ....--}}
<div class="col-md-6 showSucMessage">
    @if (session('success'))
        <div class="alert alert-success">
            <a href="#" class="close" data-dismiss="alert" aria-label="close">&times;</a> {{ session('success') }}
        </div>
    @endif
</div>

//This function is for to hide success message
function hideSuccessMessage(){
    //$('.showSucMessage').fadeOut(2000);
    $('.showSucMessage').fadeOut(2000);
    }

    setTimeout(function(){
    hideSuccessMessage();
    }, 1000);
// -------------------------
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


